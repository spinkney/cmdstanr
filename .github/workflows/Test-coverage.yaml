---
# Github Actions workflow to analyze CmdStanR code, test coverage
# yamllint disable rule:line-length

name: Test coverage

'on':
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test-coverage-ubuntu:
    name: "Linux"
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: ubuntu-16.04
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      NOT_CRAN: true
      CMDSTAN_VERSION: "2.26.1"

    steps:
      - name: cmdstan env vars
        run: |
          echo "CMDSTAN_PATH=${HOME}/.cmdstanr" >> $GITHUB_ENV
        shell: bash

      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: Test-coverage.yml
        if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
      - uses: r-lib/actions/setup-pandoc@v1

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
          sudo apt-get install -y openmpi-bin openmpi-common openmpi-doc libopenmpi-dev

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ubuntu-r-4.0-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ubuntu-r-4.0-1-

      - name: Install dependencies
        run: |
          install.packages(c("posterior", "cmdstanr", "remotes", "curl"),repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("covr")
          remotes::install_cran("gridExtra")
        shell: Rscript {0}

      - name: Cache cmdstan
        uses: actions/cache@v2
        with:
          path: ${{ env.CMDSTAN_PATH }}
          key: ${{ runner.os }}-codecov-cmdstan-${{ env.CMDSTAN_VERSION }}
          restore-keys: ${{ runner.os }}-codecov-cmdstan-

      - name: Install cmdstan
        run: |
          version <- Sys.getenv("CMDSTAN_VERSION")
          url <- sprintf("https://github.com/stan-dev/cmdstan/releases/download/v%s/cmdstan-%s.tar.gz", version, version)
          cmdstanr::install_cmdstan(cores = 2, release_url = url)
        shell: Rscript {0}

      - name: Test coverage
        run: covr::codecov(type = "tests")
        shell: Rscript {0}

  test-coverage-windows:
    name: "Windows"
    if: "! contains(github.event.head_commit.message, '[ci skip]')"
    runs-on: windows-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      NOT_CRAN: true
    steps:
      - uses: actions/checkout@v2

      - name: Set path for RTools 4.0
        if: runner.os == 'Windows'
        run: echo "C:/rtools40/usr/bin;C:/rtools40/mingw64/bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Install mingw32-make and check toolchain path
        if: runner.os == 'Windows'
        run: |
          pacman -Syu mingw-w64-x86_64-make --noconfirm
          g++ --version
          Get-Command g++ | Select-Object -ExpandProperty Definition
          mingw32-make --version
          Get-Command mingw32-make | Select-Object -ExpandProperty Definition
        shell: powershell

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: 'release'

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Install dependencies
        run: |
          install.packages(c("posterior", "cmdstanr", "remotes", "curl"),repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
          cmdstanr::install_cmdstan(cores = 2, overwrite = TRUE)
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("covr")
          remotes::install_cran("gridExtra")
        shell: Rscript {0}

      - name: Test coverage
        run: |
          options(covr.gcov = 'C:/rtools40/mingw64/bin/gcov.exe');
          covr::codecov(type = "tests", function_exclusions = "sample_mpi")
        shell: Rscript {0}
